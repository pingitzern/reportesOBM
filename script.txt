// Configuración
var SHEET_ID = '14_6UyAhZQqHz6EGMRhr7YyqQ-KHMBsjeU4M5a_SRhis'; // REEMPLAZA ESTO con el ID de tu Google Sheet
var SHEET_NAME = 'Hoja 1';

function doPost(e) {
  try {
    var data = JSON.parse(e.postData.contents);
    var action = data.action;
    
    var result;
    switch(action) {
      case 'guardar':
        result = guardarMantenimiento(data);
        break;
      case 'buscar':
        result = buscarMantenimientos(data);
        break;
      case 'actualizar':
        result = actualizarMantenimiento(data);
        break;
      case 'eliminar':
        result = eliminarMantenimiento(data);
        break;
      case 'dashboard':
        result = obtenerDatosDashboard();
        break;
      default:
        throw new Error('Acción no válida');
    }
    
    return ContentService
      .createTextOutput(JSON.stringify({result: 'success', data: result}))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (error) {
    return ContentService
      .createTextOutput(JSON.stringify({result: 'error', error: error.toString()}))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

function doGet(e) {
  var action = e.parameter.action;
  
  try {
    var result;
    if (action === 'dashboard') {
      result = obtenerDatosDashboard();
    } else {
      result = {message: 'API funcionando'};
    }
    
    return ContentService
      .createTextOutput(JSON.stringify({result: 'success', data: result}))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (error) {
    return ContentService
      .createTextOutput(JSON.stringify({result: 'error', error: error.toString()}))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

function guardarMantenimiento(data) {
  var sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(SHEET_NAME);
  var timestamp = new Date();
  var idUnico = Utilities.getUuid();
  
  var rowData = [
    data.cliente,
    data.fecha,
    data.direccion,
    data.tecnico,
    data.modelo,
    data.id_interna,
    data.n_serie,
    data.proximo_mant,
    data.fugas_found,
    data.fugas_left,
    data.cond_red_found || 0,
    data.cond_red_left || 0,
    data.cond_perm_found || 0,
    data.cond_perm_left || 0,
    data.rechazo_found || '',
    data.rechazo_left || '',
    data.presion_found || 0,
    data.presion_left || 0,
    data.caudal_perm_found || 0,
    data.caudal_perm_left || 0,
    data.caudal_rech_found || 0,
    data.caudal_rech_left || 0,
    data.relacion_found || '',
    data.relacion_left || '',
    data.precarga_found || 0,
    data.precarga_left || 0,
    data.presostato_alta_found,
    data.presostato_alta_left,
    data.presostato_baja_found,
    data.presostato_baja_left,
    data.etapa1_detalles,
    data.etapa1_accion,
    data.etapa2_detalles,
    data.etapa2_accion,
    data.etapa3_detalles,
    data.etapa3_accion,
    data.etapa4_detalles,
    data.etapa4_accion,
    data.etapa5_detalles,
    data.etapa5_accion,
    data.etapa6_detalles,
    data.etapa6_accion,
    data.sanitizacion,
    data.resumen,
    data.numero_reporte,
    timestamp,
    idUnico
  ];
  
  sheet.appendRow(rowData);
  return {id: idUnico, mensaje: 'Mantenimiento guardado correctamente'};
}

function buscarMantenimientos(filtros) {
  var sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(SHEET_NAME);
  var data = sheet.getDataRange().getValues();
  var headers = data[0];
  
  var resultados = [];
  
  for (var i = 1; i < data.length; i++) {
    var row = data[i];
    var mantenimiento = {};
    var coincide = true;
    
    for (var j = 0; j < headers.length; j++) {
      mantenimiento[headers[j]] = row[j];
    }
    
    if (filtros.cliente && mantenimiento.Cliente && 
        !mantenimiento.Cliente.toLowerCase().includes(filtros.cliente.toLowerCase())) {
      coincide = false;
    }
    
    if (filtros.tecnico && mantenimiento.Tecnico_Asignado && 
        !mantenimiento.Tecnico_Asignado.toLowerCase().includes(filtros.tecnico.toLowerCase())) {
      coincide = false;
    }
    
    if (filtros.fecha && mantenimiento.Fecha_Servicio !== filtros.fecha) {
      coincide = false;
    }
    
    if (coincide) {
      resultados.push(mantenimiento);
    }
  }
  
  return resultados;
}

function actualizarMantenimiento(data) {
  var sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(SHEET_NAME);
  var allData = sheet.getDataRange().getValues();
  var headers = allData[0];
  
  var idIndex = headers.indexOf('ID_Unico');
  var rowIndex = -1;
  
  for (var i = 1; i < allData.length; i++) {
    if (allData[i][idIndex] === data.id) {
      rowIndex = i + 1;
      break;
    }
  }
  
  if (rowIndex === -1) {
    throw new Error('Mantenimiento no encontrado');
  }
  
  var campos = [
    'Cliente', 'Fecha_Servicio', 'Direccion', 'Tecnico_Asignado', 'Modelo_Equipo',
    'ID_Interna_Activo', 'Numero_Serie', 'Proximo_Mantenimiento', 'Fugas_Visibles_Found',
    'Fugas_Visibles_Left', 'Conductividad_Red_Found', 'Conductividad_Red_Left',
    'Conductividad_Permeado_Found', 'Conductividad_Permeado_Left', 'Rechazo_Ionico_Found',
    'Rechazo_Ionico_Left', 'Presion_Entrada_Found', 'Presion_Entrada_Left',
    'Caudal_Permeado_Found', 'Caudal_Permeado_Left', 'Caudal_Rechazo_Found',
    'Caudal_Rechazo_Left', 'Relacion_Rechazo_Permeado_Found', 'Relacion_Rechazo_Permeado_Left',
    'Precarga_Tanque_Found', 'Precarga_Tanque_Left', 'Test_Presostato_Alta_Found',
    'Test_Presostato_Alta_Left', 'Test_Presostato_Baja_Found', 'Test_Presostato_Baja_Left',
    'Etapa1_Detalles', 'Etapa1_Accion', 'Etapa2_Detalles', 'Etapa2_Accion',
    'Etapa3_Detalles', 'Etapa3_Accion', 'Etapa4_Detalles', 'Etapa4_Accion',
    'Etapa5_Detalles', 'Etapa5_Accion', 'Etapa6_Detalles', 'Etapa6_Accion',
    'Sanitizacion_Sistema', 'Resumen_Recomendaciones'
  ];
  
  for (var j = 0; j < campos.length; j++) {
    var colIndex = headers.indexOf(campos[j]);
    if (colIndex !== -1 && data[campos[j].toLowerCase()] !== undefined) {
      sheet.getRange(rowIndex, colIndex + 1).setValue(data[campos[j].toLowerCase()]);
    }
  }
  
  return {mensaje: 'Mantenimiento actualizado correctamente'};
}

function eliminarMantenimiento(data) {
  var sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(SHEET_NAME);
  var allData = sheet.getDataRange().getValues();
  var headers = allData[0];
  
  var idIndex = headers.indexOf('ID_Unico');
  
  for (var i = 1; i < allData.length; i++) {
    if (allData[i][idIndex] === data.id) {
      sheet.deleteRow(i + 1);
      return {mensaje: 'Mantenimiento eliminado correctamente'};
    }
  }
  
  throw new Error('Mantenimiento no encontrado');
}

function obtenerDatosDashboard() {
  var sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(SHEET_NAME);
  var data = sheet.getDataRange().getValues();
  var headers = data[0];
  
  var ahora = new Date();
  var inicioMes = new Date(ahora.getFullYear(), ahora.getMonth(), 1);
  var unMesDespues = new Date(ahora.getFullYear(), ahora.getMonth() + 1, 1);
  
  var total = data.length - 1;
  var esteMes = 0;
  var proximos = 0;
  var tecnicos = new Set();
  var mensual = new Array(12).fill(0);
  var tecnicosData = {};
  var proximosMantenimientos = [];
  
  for (var i = 1; i < data.length; i++) {
    var row = data[i];
    var mantenimiento = {};
    
    for (var j = 0; j < headers.length; j++) {
      mantenimiento[headers[j]] = row[j];
    }
    
    if (mantenimiento.Fecha_Servicio) {
      var fechaServicio = new Date(mantenimiento.Fecha_Servicio);
      if (fechaServicio >= inicioMes && fechaServicio < unMesDespues) {
        esteMes++;
      }
      
      if (fechaServicio.getFullYear() === ahora.getFullYear()) {
        mensual[fechaServicio.getMonth()]++;
      }
    }
    
    if (mantenimiento.Proximo_Mantenimiento) {
      var proximoMant = new Date(mantenimiento.Proximo_Mantenimiento);
      var diffTime = proximoMant - ahora;
      var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      
      if (diffDays > 0 && diffDays <= 30) {
        proximos++;
        proximosMantenimientos.push({
          cliente: mantenimiento.Cliente,
          fecha: mantenimiento.Proximo_Mantenimiento,
          tecnico: mantenimiento.Tecnico_Asignado,
          dias_restantes: diffDays
        });
      }
    }
    
    if (mantenimiento.Tecnico_Asignado) {
      tecnicos.add(mantenimiento.Tecnico_Asignado);
      if (!tecnicosData[mantenimiento.Tecnico_Asignado]) {
        tecnicosData[mantenimiento.Tecnico_Asignado] = 0;
      }
      tecnicosData[mantenimiento.Tecnico_Asignado]++;
    }
  }
  
  proximosMantenimientos.sort((a, b) => {
    return new Date(a.fecha) - new Date(b.fecha);
  });
  
  var tecnicosArray = [];
  for (var tecnico in tecnicosData) {
    tecnicosArray.push({tecnico: tecnico, count: tecnicosData[tecnico]});
  }
  
  return {
    total: total,
    esteMes: esteMes,
    proximos: proximos,
    tecnicos: tecnicos.size,
    mensual: mensual,
    tecnicosData: tecnicosArray,
    proximosMantenimientos: proximosMantenimientos.slice(0, 10)
  };
}