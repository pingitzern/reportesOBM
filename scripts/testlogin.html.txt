<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <title>Tester Login + Token (Apps Script)</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    :root { --gap: .6rem; }
    * { box-sizing: border-box; }
    body { font-family: system-ui, Arial, sans-serif; margin: 2rem; color:#222; }
    h1 { margin-top: 0; }
    .row { display:flex; gap:var(--gap); align-items:center; flex-wrap:wrap; margin: .35rem 0; }
    label { min-width: 120px; }
    input, select { padding:.5rem; min-width:320px; }
    button { padding:.55rem .9rem; cursor:pointer; }
    .card { margin-top:1rem; padding:1rem; border:1px solid #ddd; border-radius:10px; background:#fafafa; }
    .grid { display:grid; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr)); gap: var(--gap); }
    .muted { color:#666; }
    .error { color:#b00020; font-weight:700; }
    .ok { color:#0a7a07; font-weight:700; }
    pre { background:#111; color:#eee; padding:1rem; overflow:auto; border-radius:8px; }
    code { font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, "Liberation Mono", monospace; }
    .badge { font-size:.8rem; padding:.25rem .5rem; border-radius:6px; background:#eef; color:#224; }
  </style>
</head>
<body>
  <h1>Tester de API (Login + Token)</h1>

  <div class="card">
    <div class="grid">
      <div class="row">
        <label>API URL</label>
        <input id="apiUrl" value="https://script.google.com/macros/s/AKfycbxKwEuv3OlUB0tvYeZpy3_msHiSyDl9rjeTf9xCWOSMtBB05WO9jcAqTdjWtAHz8b3Y7g/exec" />
      </div>
      <div class="row">
        <label>Content-Type</label>
        <select id="ctype">
          <option value="text/plain" selected>text/plain (JSON simple, sin preflight)</option>
          <option value="application/x-www-form-urlencoded">application/x-www-form-urlencoded (e.parameter)</option>
        </select>
      </div>
      <div class="row">
        <button id="btnVersion">Probar version</button>
        <span class="muted">Devuelve <code>{code, auth, session}</code> si está implementado</span>
      </div>
    </div>
  </div>

  <div class="card">
    <h3>Usuarios (listUsers)</h3>
    <div class="row">
      <label>Usuarios</label>
      <select id="userSelect"><option value="">—</option></select>
      <button id="btnCargar">Cargar usuarios</button>
    </div>
    <div class="row">
      <label>Email</label>
      <input id="mail" placeholder="usuario@dominio.com" />
    </div>
    <div class="row">
      <label>Password</label>
      <input id="password" type="password" placeholder="••••••••" />
      <button id="btnLogin">Login</button>
    </div>
    <div class="row">
      <span>Token: <span id="tokenView" class="badge">—</span></span>
      <span>Expira: <span id="expView" class="badge">—</span></span>
    </div>
    <div class="row">
      <button id="btnPerfil">Mi perfil</button>
      <button id="btnRenew">Renovar</button>
      <button id="btnLogout">Logout</button>
    </div>
  </div>

  <div class="card">
    <h3>Resultado</h3>
    <div id="out" class="muted">—</div>
    <h3>Raw</h3>
    <pre id="raw">—</pre>
  </div>

  <script>
    // ------------------ Helpers de storage ------------------
    const K_TOKEN = "token", K_EXP = "expiresAt";

    function setSession(token, expiresAt) {
      if (token) localStorage.setItem(K_TOKEN, token); else localStorage.removeItem(K_TOKEN);
      if (expiresAt) localStorage.setItem(K_EXP, expiresAt); else localStorage.removeItem(K_EXP);
      document.getElementById('tokenView').textContent = token || '—';
      document.getElementById('expView').textContent = expiresAt || '—';
    }

    function getSession() {
      return {
        token: localStorage.getItem(K_TOKEN),
        expiresAt: localStorage.getItem(K_EXP)
      };
    }

    setSession(getSession().token, getSession().expiresAt);

    // ------------------ Networking ------------------
    const $ = (s) => document.querySelector(s);
    const raw = $('#raw');
    const out = $('#out');

    function encodeForm(obj) {
      return Object.keys(obj)
        .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(obj[k] ?? ''))
        .join('&');
    }

    async function post(action, payload = {}) {
      const url = $('#apiUrl').value.trim();
      const ct = $('#ctype').value;

      const bodyObj = { action, ...payload };
      let res;

      if (ct === 'text/plain') {
        res = await fetch(url, {
          method: 'POST',
          headers: { 'Content-Type': 'text/plain' },
          body: JSON.stringify(bodyObj)
        });
      } else {
        res = await fetch(url, {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: encodeForm(bodyObj)
        });
      }

      const text = await res.text();
      raw.textContent = text;

      // intentar parsear JSON (si no, devolver texto)
      try { return JSON.parse(text); } catch { return { text }; }
    }

    // ------------------ Acciones ------------------
    async function doVersion() {
      out.textContent = 'Probando version...';
      const data = await post('version');
      out.innerHTML = data?.result === 'success'
        ? `<span class="ok">OK</span> → code: <code>${data.data?.code}</code>`
        : `<span class="error">Error</span> → ${data.error || data.text || 'sin detalles'}`;
    }

    async function cargarUsuarios() {
      out.textContent = 'Cargando usuarios...';
      const data = await post('listUsers');
      if (data?.result === 'success' && Array.isArray(data.data?.usuarios)) {
        const opts = ['<option value="">Elegí un usuario...</option>'].concat(
          data.data.usuarios.map(u => {
            const label = `${u.nombre || '(Sin nombre)'}${u.rol ? ' ('+u.rol+')' : ''} – ${u.mail}`;
            return `<option value="${u.mail}">${label}</option>`;
          })
        );
        $('#userSelect').innerHTML = opts.join('');
        out.innerHTML = `<span class="ok">OK</span> → ${data.data.usuarios.length} usuario(s)`;
      } else {
        $('#userSelect').innerHTML = '<option value="">—</option>';
        out.innerHTML = `<span class="error">Error</span> → ${data.error || 'listUsers no disponible'}`;
      }
    }

    $('#userSelect').addEventListener('change', () => {
      if ($('#userSelect').value) $('#mail').value = $('#userSelect').value;
    });

    async function doLogin() {
      out.textContent = 'Haciendo login...';
      const mail = $('#mail').value.trim();
      const password = $('#password').value;
      const data = await post('login', { mail, password });
      if (data?.result === 'success') {
        const { token, expiresAt } = data.data || {};
        setSession(token, expiresAt);
        out.innerHTML = `<span class="ok">Login OK</span>`;
      } else {
        out.innerHTML = `<span class="error">Login ERROR</span> → ${data.error || 'credenciales / endpoint'}`;
      }
    }

    async function doPerfil() {
      out.textContent = 'Obteniendo perfil...';
      const { token } = getSession();
      const data = await post('mi-perfil', { token });
      if (data?.result === 'success') {
        const u = data.data?.usuario || {};
        out.innerHTML = `<span class="ok">Perfil</span> → ${u.Nombre || u.nombre || u.mail || '(sin datos)'}`;
      } else {
        out.innerHTML = `<span class="error">Perfil ERROR</span> → ${data.error || 'token/endpoint'}`;
      }
    }

    async function doRenew() {
      out.textContent = 'Renovando...';
      const { token } = getSession();
      const data = await post('renew', { token });
      if (data?.result === 'success') {
        setSession(data.data?.token, data.data?.expiresAt);
        out.innerHTML = `<span class="ok">Renovado</span>`;
      } else {
        out.innerHTML = `<span class="error">Renew ERROR</span> → ${data.error || 'token/endpoint'}`;
      }
    }

    async function doLogout() {
      out.textContent = 'Cerrando sesión...';
      const { token } = getSession();
      const data = await post('logout', { token });
      if (data?.result === 'success') {
        setSession(null, null);
        out.innerHTML = `<span class="ok">Logout OK</span>`;
      } else {
        out.innerHTML = `<span class="error">Logout ERROR</span> → ${data.error || 'token/endpoint'}`;
      }
    }

    // ------------------ Bindings ------------------
    $('#btnVersion').onclick = doVersion;
    $('#btnCargar').onclick = cargarUsuarios;
    $('#btnLogin').onclick = doLogin;
    $('#btnPerfil').onclick = doPerfil;
    $('#btnRenew').onclick = doRenew;
    $('#btnLogout').onclick = doLogout;

    // Tip: descomentá si querés auto-probar version al cargar
    // doVersion();
  </script>
</body>
</html>
